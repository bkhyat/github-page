{"version":3,"sources":["components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["CustomModal","props","handleChange","e","target","name","value","type","checked","activeItem","state","setState","this","toggle","onSave","isOpen","for","id","title","onChange","placeholder","description","check","completed","color","onClick","Component","App","refreshList","axios","get","then","res","todoList","data","catch","err","console","log","modal","handleSubmit","item","put","post","handleDelete","delete","createItem","editItem","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a1c67a3.chunk.js","sourcesContent":["import {Component} from \"react\";\r\nimport {Button, Form, FormGroup, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\n\r\n\r\nexport default class CustomModal extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeItem: this.props.activeItem\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let {name, value} = e.target;\r\n\r\n        if (e.target.type === \"checkbox\") {\r\n            value = e.target.checked;\r\n        }\r\n\r\n        const activeItem = { ...this.state.activeItem, [name]: value};\r\n\r\n        this.setState({activeItem});\r\n    };\r\n\r\n    render(){\r\n        const {toggle, onSave} = this.props;\r\n\r\n        return (\r\n            <Modal isOpen={true} toggle={toggle}>\r\n                <ModalHeader toggle={toggle}> Todo Items</ModalHeader>\r\n                <ModalBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"todo-title\">Title</Label>\r\n                            <Input\r\n                                type = \"text\"\r\n                                id=\"todo-title\"\r\n                                name=\"title\"\r\n                                value={this.state.activeItem.title}\r\n                                onChange={this.handleChange}\r\n                                placeholder=\"Enter Todo Title\"\r\n                                />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"todo-description\">Description</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                id=\"todo-description\"\r\n                                name=\"description\"\r\n                                value={this.state.activeItem.description}\r\n                                onChange={this.handleChange}\r\n                                placeholder=\"Enter Todo description\"\r\n                                />\r\n                        </FormGroup>\r\n                        <FormGroup check>\r\n                            <Label check>\r\n                                <Input\r\n                                    type=\"checkbox\"\r\n                                    name=\"completed\"\r\n                                    checked={this.state.activeItem.completed}\r\n                                    onChange={this.handleChange}\r\n                                    />\r\n                                Completed\r\n                            </Label>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"success\"\r\n                        onClick={() => onSave(this.state.activeItem)}\r\n                        >Save</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\nimport CustomModal from \"./components/Modal\";\nimport axios from \"axios\";\n\nconst todoItems = [\n  {\n    id: 1,\n    title: \"Go to Market\",\n    description: \"Buy ingredients to prepare dinner\",\n    completed: true,\n  },\n  {\n    id: 2,\n    title: \"Study\",\n    description: \"Read Algebra and History textbook for the upcoming test\",\n    completed: false,\n  },\n  {\n    id: 3,\n    title: \"Sammy's books\",\n    description: \"Go to library to return Sammy's books\",\n    completed: true,\n  },\n  {\n    id: 4,\n    title: \"Article\",\n    description: \"Write article on how to use Django with React\",\n    completed: false,\n  },\n];\n\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewCompleted: false,\n      todoList: [],\n      modal: false,\n      activeItem: {\n          title: \"\",\n          description: \"\",\n          completed: false,\n      }\n    };\n  }\n\n  componentDidMount() {\n      this.refreshList();\n  }\n\n  refreshList = () => {\n      axios\n          .get('/api/todos/')\n          .then((res)=> this.setState({todoList: res.data}))\n          .catch((err)=> console.log(err));\n  };\n\n    toggle = () => {\n      this.setState({modal: !this.state.modal});\n  };\n\n  handleSubmit = (item) => {\n      this.toggle();\n      if (item.id) {\n          axios\n              .put(`/api/todos/${item.id}/`, item)\n              .then((res)=> this.refreshList());\n          return;\n      }\n      axios\n          .post('/api/todos/', item)\n          .then((res)=> this.refreshList());\n  };\n\n  handleDelete = (item) => {\n      axios\n          .delete(`/api/todos/${item.id}/`, item)\n          .then((res)=> this.refreshList());\n  };\n\n  createItem = () => {\n      const item = {title: \"\", description: \"\", completed: false};\n\n      this.setState({activeItem: item, modal: !this.state.modal});\n  };\n\n  editItem = (item) => {\n      this.setState({activeItem: item, modal: !this.state.modal});\n  };\n\n  displayCompleted = (status) => {\n    if (status){\n      return this.setState({viewCompleted: true});\n    }\n\n    return this.setState({viewCompleted: false});\n  };\n\n  renderTabList = () => {\n    return(\n        <div className=\"nav nav-tabs\">\n          <span className={this.state.viewCompleted ? \"nav-link active\": \"nav-link\"}\n                onClick={() => this.displayCompleted(true)}\n                >\n            Complete\n          </span>\n          <span className={this.state.viewCompleted ? \"nav-link\" : \"nav-link active\"}\n                onClick={() => this.displayCompleted(false)}\n                >Incomplete</span>\n        </div>\n    );\n  };\n\n  renderItems = () => {\n      const {viewCompleted} = this.state;\n      const newItems = this.state.todoList.filter(\n          (item) => item.completed === viewCompleted\n      );\n\n      return newItems.map((item)=>(\n          <li\n          key={item.id}\n          className=\"list-group-item d-flex justify-content-between align-items-center\"\n          >\n            <span\n              className={`todo-title mr-2 ${\n                this.state.viewCompleted ? \"completed-todo\": \"\"\n              }`}\n              title={item.description}\n              >\n              {item.title}\n            </span>\n            <span>\n              <button\n                className=\"btn btn-secondary mr-2\"\n                onClick={() => this.editItem(item)}\n                >Edit</button>\n              <button\n                className=\"btn btn-danger\"\n                onClick={() => this.handleDelete(item)}\n                >Delete</button>\n              </span>\n          </li>\n      ));\n\n  };\n\n  render(){\n    return (\n        <main className=\"container\">\n          <h1 className=\"text-center my-4\">ToDo App</h1>\n          <div className=\"row\">\n            <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n              <div className=\"card p-3\">\n                <div className=\"mb-4\">\n                  <button\n                    className=\"btn btn-primary\"\n                    onClick={this.createItem}\n                    >Add Task</button>\n                </div>\n                {this.renderTabList()}\n                <ul className=\"list-group list-group-flush border-top-0\">\n                  {this.renderItems()}\n                </ul>\n              </div>\n            </div>\n          </div>\n            {this.state.modal ? (\n                <CustomModal\n                    activeItem={this.state.activeItem}\n                    toggle={this.toggle}\n                    onSave={this.handleSubmit}\n                    />\n            ) : null}\n        </main>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}